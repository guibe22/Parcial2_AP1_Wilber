@page "/R_Productos"
@page "/R_Productos/{ProductoId:int}"
@inject ProductosBLL ProductosBLL

<EditForm Model="producto" OnValidSubmit="Guardar">
     
     <div class= "card text-primary">
        
     
         <div class="card-header text-center  ">
            @*Encabezado*@
        <h1> Entrada de Productos Empacados</h1>
         </div>
     
        <div class="card-body">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="row">
                <div class="col-4">
                    <label for="txtID" class="form-label"> ID:</label>
                    <input type="number"  id="txtID" class="form-control" @bind-value="producto.ProductoId">
                </div>
                 <div class="col-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label for="txtDescripcion" class="form-label"> Descripción:</label>
                    <input type="text"  id="txtDescripcion" class="form-control" @bind-value="producto.Descripcion">
                    <ValidationMessage For="@(() => producto.Descripcion)" />
                </div>
                <div class="col-6">
                    <label for="txtCosto" class="form-label"> Costo:</label>
                    <input type="number"  id="txtCosto" class="form-control" @bind-value="producto.Costo">
                    <ValidationMessage For="@(() => producto.Costo)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label for="txtPrecio" class="form-label"> Precio:</label>
                    <input type="number"  id="txtPrecio" class="form-control" @bind-value="producto.Precio">
                    <ValidationMessage For="@(() => producto.Precio)" />
                </div>
                <div class="col-6">
                    <label for="txtExistencia" class="form-label"> Existencia:</label>
                    <input type="number"  id="txtExistencia" class="form-control" @bind-value="producto.Existencia">
                    <ValidationMessage For="@(() => producto.Existencia)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label for="txtCategoria" class="form-label"> Categoria:</label>
                    <InputSelect class="form-select" @bind-Value="producto.Categoria">
                    @if (String.IsNullOrEmpty(producto.Categoria))
                            {
                             producto.Categoria = categorias.FirstOrDefault();
                            }
                         @foreach (var categoria in categorias )
                         {
                             <option value="@categoria">@categoria</option> 
                         }
                    </InputSelect>
                </div>
            </div>
            
            
        </div>
        <div class="card-footer text-center fs-5 ">
             @*Botones*@
             <button name="BtnNuevo" id="BtnNuevo" class="btn btn-primary mr-2" @onclick="Nuevo" type="button"> Nuevo </button>
             <button name="BtnGuardar" id="BtnGuardar" class="btn btn-success mr-2" type="submit" > Guardar </button>
             <button name="BtnEliminar" id="BtnEliminar" class="btn btn-danger mr-2" @onclick="Eliminar" type="button"> Eliminar </button>
         </div>
     </div>
</EditForm>

  
@code{
    [Parameter]
    public int ProductoId { get; set; }
    public Productos producto { get; set; } = new Productos();
    public List<String> categorias = new List<String>(){"Normal", "Empacado"};
    
   

    protected override void OnInitialized(){
     if(ProductoId>0){
        producto.ProductoId= ProductoId;
        Buscar();
     }
    
    }

    void Guardar(){
        if(!Validar()){return;}

        if(ProductosBLL.Guardar(producto)){
            Nuevo();
        }
           
     }

    void Buscar(){
       var encontrado = ProductosBLL.Buscar(producto.ProductoId);
       if(encontrado!=null){
        producto= encontrado;
       }

    }
   
    void Nuevo(){
       
        producto= new Productos();

    }
    void Eliminar(){

        if(ProductosBLL.Existe(producto.ProductoId)){
            if(ProductosBLL.Eliminar(producto)){
                Nuevo();
            }
        }
        

    }
    bool Validar(){
        bool validacion = true;

        if(String.IsNullOrEmpty(producto.Descripcion)){validacion= false;}
        if(producto.Costo<=0){validacion= false;}
        if(producto.Precio<=0){validacion= false;}
        if(producto.Existencia<0){validacion= false;}
        return validacion;
    }

}

